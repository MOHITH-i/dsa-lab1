class Node:
    def __init__(self, value):
        self.val = value
        self.left = None
        self.right = None

class BST:
    def __init__(self):
        self.root = None


    def insert(self, value):
        def _insert(node, value):
            if not node:
                return Node(value)
            if value < node.val:
                node.left = _insert(node.left, value)
            else:
                node.right = _insert(node.right, value)
            return node
        self.root = _insert(self.root, value)

    def search(self, value):
        def _search(node, value):
            if not node:
                return False
            if value == node.val:
                return True
            elif value < node.val:
                return _search(node.left, value)
            else:
                return _search(node.right, value)
        return _search(self.root, value)
    def delete(self, value):
        def _delete(node, value):
            if not node:
                return None
            if value < node.val:
                node.left = _delete(node.left, value)
            elif value > node.val:
                node.right = _delete(node.right, value)
            else:
                if not node.left:
                    return node.right
                elif not node.right:
                    return node.left
                succ = node.right
                while succ.left:
                    succ = succ.left
                node.val = succ.val
                node.right = _delete(node.right, succ.val)
            return node
        self.root = _delete(self.root, value)
    
    def inorder_traversal(self):
        def _inorder(node):
            if node:
                _inorder(node.left)
                print(node.val, end=' ')
                _inorder(node.right)
        _inorder(self.root)
    



bst = BST()
print("Inserting 50, 20, 70")
bst.root=Node(50)
bst.root.left=Node(30)
bst.root.right=Node(70)
bst.root.left.left=Node(20)
bst.root.left.right=Node(40)
bst.root.right.left=Node(60)
bst.root.right.right=Node(80)
bst.insert(50)
bst.insert(20)
bst.insert(70)
print("\nSearching for 20:")
print("Found" if bst.search(20) else "Not Found")
print("\nDeleting 20")
bst.delete(20)

print("\nInorder Traversal after deletion:")
bst.inorder_traversal()

